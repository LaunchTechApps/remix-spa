{"version":3,"file":"use-session-DUYmeLH9.js","sources":["../../../app/hooks/use-session.tsx"],"sourcesContent":["import { api } from \"@/api/api\";\nimport { getErrorResponse, HeadersBuilder } from \"@/api/util\";\nimport log from \"@/lib/logger\";\nimport { deleteAllCookies, getSecureCookie, getUserClaims } from \"@/sessions\";\nimport { type ReactNode, createContext, useContext, useEffect, useMemo, useState } from \"react\";\n\ninterface UserSessionContextType {\n   accessToken: string;\n   isSignedIn: boolean;\n   signIn: (accessToken: string) => void;\n   signOut: () => Promise<void>;\n   getClaims: () => Record<string, string> | undefined;\n}\n\nconst UserSessionContext = createContext<UserSessionContextType | undefined>(undefined);\nexport const UserSessionProvider = ({ children }: { children: ReactNode }) => {\n   const [accessToken, setAccessToken] = useState(\"\");\n   const [isSignedIn, setSignedIn] = useState(false);\n\n   useEffect(() => {\n      const timeout = setTimeout(() => {\n         const token = getSecureCookie(\"access\");\n         if (token) {\n            setSignedIn(true);\n            setAccessToken(accessToken);\n         }\n      }, 0);\n      return () => clearTimeout(timeout);\n   }, []);\n\n   const signIn = (accessToken: string) => {\n      setAccessToken(accessToken);\n      setSignedIn(true);\n   };\n\n   const signOut = async (): Promise<void> => {\n      const accessToken = getSecureCookie(\"access\") || \"\"\n      const refreshToken = getSecureCookie(\"refresh\") || \"\"\n\n      const headers = HeadersBuilder.New()\n         .setAccessToken(accessToken)\n         .setRefreshToken(refreshToken)\n         .build()\n\n      try {\n         await api.signOut(headers)\n      } catch (error) {\n         const errRes = await getErrorResponse(error)\n         if (errRes) {\n            log.error(errRes)\n         }\n      }\n\n      deleteAllCookies();\n      setAccessToken(\"\");\n      setSignedIn(false);\n   };\n\n   const getClaims = () => getUserClaims()\n\n   const session = { accessToken, isSignedIn, signIn, signOut, getClaims }\n\n   const value = useMemo(() => (session), [accessToken, isSignedIn]);\n\n   return <UserSessionContext.Provider value={value}>{children}</UserSessionContext.Provider>;\n};\n\nexport const useSession = () => {\n   const context = useContext(UserSessionContext);\n   if (!context) {\n      throw new Error(\"useColorTheme must be used within a ColorThemeProvider\");\n   }\n   return context;\n};\n"],"names":["UserSessionContext","createContext","UserSessionProvider","children","accessToken","setAccessToken","useState","isSignedIn","setSignedIn","useEffect","timeout","getSecureCookie","session","refreshToken","headers","HeadersBuilder","api","error","errRes","getErrorResponse","log","deleteAllCookies","getUserClaims","value","useMemo","jsx","useSession","context","useContext"],"mappings":"0IAcA,MAAMA,EAAqBC,EAAAA,cAAkD,MAAS,EACzEC,EAAsB,CAAC,CAAE,SAAAC,KAAwC,CAC3E,KAAM,CAACC,EAAaC,CAAc,EAAIC,EAAAA,SAAS,EAAE,EAC3C,CAACC,EAAYC,CAAW,EAAIF,EAAAA,SAAS,EAAK,EAEhDG,EAAAA,UAAU,IAAM,CACP,MAAAC,EAAU,WAAW,IAAM,CAChBC,EAAgB,QAAQ,IAEnCH,EAAY,EAAI,EAChBH,EAAeD,CAAW,IAE7B,CAAC,EACG,MAAA,IAAM,aAAaM,CAAO,CACpC,EAAG,EAAE,EAgCL,MAAME,EAAU,CAAE,YAAAR,EAAa,WAAAG,EAAY,OA9B3BH,GAAwB,CACrCC,EAAeD,CAAW,EAC1BI,EAAY,EAAI,CACnB,EA2BmD,QAzBnC,SAA2B,CAClCJ,MAAAA,EAAcO,EAAgB,QAAQ,GAAK,GAC3CE,EAAeF,EAAgB,SAAS,GAAK,GAE7CG,EAAUC,EAAe,MAC3B,eAAeX,CAAW,EAC1B,gBAAgBS,CAAY,EAC5B,MAAM,EAEN,GAAA,CACK,MAAAG,EAAI,QAAQF,CAAO,QACnBG,EAAO,CACP,MAAAC,EAAS,MAAMC,EAAiBF,CAAK,EACvCC,GACDE,EAAI,MAAMF,CAAM,CACnB,CAGcG,EAAA,EACjBhB,EAAe,EAAE,EACjBG,EAAY,EAAK,CACpB,EAI4D,UAF1C,IAAMc,EAAc,CAEgC,EAEhEC,EAAQC,EAAAA,QAAQ,IAAOZ,EAAU,CAACR,EAAaG,CAAU,CAAC,EAEhE,OAAQkB,EAAAA,IAAAzB,EAAmB,SAAnB,CAA4B,MAAAuB,EAAe,SAAApB,CAAS,CAAA,CAC/D,EAEauB,EAAa,IAAM,CACvB,MAAAC,EAAUC,aAAW5B,CAAkB,EAC7C,GAAI,CAAC2B,EACI,MAAA,IAAI,MAAM,wDAAwD,EAEpE,OAAAA,CACV"}